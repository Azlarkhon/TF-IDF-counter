{{define "index.tmpl"}}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TF-IDF Counter</title>
  <!-- Bootstrap CSS CDN -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #FF6B00;       /* Lesta Start orange */
      --primary-hover: #E05E00; /* Darker orange */
      --secondary: #F5F5F5;     /* Light gray background */
      --card-bg: #FFFFFF;       /* White cards */
      --dark: #2C3E50;         /* Dark text color */
      --light: #FFFFFF;         /* White */
      --border-color: #E0E0E0;  /* Light gray borders */
      --text-muted: #757575;   /* Gray text */
      --border-radius: 12px;
      --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05), 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    body {
      font-family: 'Inter', sans-serif;
      background-color: var(--secondary);
      color: var(--dark);
      padding-top: 2rem;
      line-height: 1.6;
    }
    
    .container {
      max-width: 1000px;
    }
    
    .card {
      border: none;
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      overflow: hidden;
      transition: transform 0.2s ease;
      background-color: var(--card-bg);
      border: 1px solid var(--border-color);
    }
    
    .card:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }
    
    .card-header {
      background-color: var(--primary);
      color: white;
      font-weight: 600;
      padding: 1.25rem 1.5rem;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }
    
    .table thead th {
      background-color: var(--primary);
      color: white;
      font-weight: 500;
      border: none;
    }
    
    .table {
      background-color: var(--card-bg);
    }
    
    .table tbody tr {
      transition: background-color 0.2s ease;
    }
    
    .table tbody tr:hover {
      background-color: rgba(255, 107, 0, 0.05);
    }
    
    .btn-primary {
      background-color: var(--primary);
      border: none;
      padding: 0.75rem 1.5rem;
      font-weight: 500;
      letter-spacing: 0.5px;
      transition: all 0.2s ease;
    }
    
    .btn-primary:hover {
      background-color: var(--primary-hover);
      transform: translateY(-1px);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .form-control, .form-select {
      border-radius: 8px;
      padding: 0.75rem 1rem;
      border: 1px solid var(--border-color);
      transition: all 0.2s ease;
      background-color: var(--card-bg);
    }
    
    .form-control:focus, .form-select:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(255, 107, 0, 0.2);
    }
    
    .file-upload-wrapper {
      position: relative;
      margin-bottom: 1.5rem;
    }
    
    .file-upload-label {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 2rem;
      border: 2px dashed var(--border-color);
      border-radius: var(--border-radius);
      background-color: var(--card-bg);
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .file-upload-label:hover {
      border-color: var(--primary);
      background-color: rgba(255, 107, 0, 0.05);
    }
    
    .file-upload-icon {
      font-size: 2.5rem;
      color: var(--primary);
      margin-bottom: 1rem;
    }
    
    .file-upload-text {
      font-weight: 500;
      margin-bottom: 0.5rem;
    }
    
    .file-upload-hint {
      color: var(--text-muted);
      font-size: 0.875rem;
    }
    
    .file-upload-input {
      position: absolute;
      left: 0;
      top: 0;
      opacity: 0;
      width: 100%;
      height: 100%;
      cursor: pointer;
    }
    
    .results-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }
    
    .badge-count {
      background-color: var(--primary);
      font-size: 1rem;
      padding: 0.5rem 1rem;
      border-radius: 50px;
    }
    
    h1 {
      color: var(--primary);
    }
    
    .text-muted {
      color: var(--text-muted) !important;
    }
    
    .tfidf-value {
      color: var(--primary);
      font-weight: bold;
    }
    
    #message {
      margin-top: 1rem;
      color: var(--primary);
      font-weight: 500;
    }
    
    .auth-form {
      max-width: 500px;
      margin: 0 auto;
    }
    
    .auth-tabs {
      margin-bottom: 1.5rem;
    }
    
    .nav-tabs .nav-link {
      color: var(--text-muted);
      border: none;
      padding: 0.75rem 1.5rem;
    }
    
    .nav-tabs .nav-link.active {
      color: var(--primary);
      border-bottom: 2px solid var(--primary);
      font-weight: 500;
    }
    
    .nav-tabs .nav-link:hover:not(.active) {
      color: var(--primary);
    }
    
    .user-menu {
      position: absolute;
      top: 1rem;
      right: 1rem;
    }
    
    .user-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: var(--primary);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      cursor: pointer;
    }
    
    .dropdown-menu {
      border: none;
      box-shadow: var(--box-shadow);
      border-radius: var(--border-radius);
    }
    
    .dropdown-item {
      padding: 0.5rem 1rem;
    }
    
    .dropdown-item:hover {
      background-color: rgba(255, 107, 0, 0.1);
      color: var(--primary);
    }
    
    @media (max-width: 768px) {
      .container {
        padding-left: 1rem;
        padding-right: 1rem;
      }
      
      .card-header {
        padding: 1rem;
      }
      
      .file-upload-label {
        padding: 1.5rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- User Menu (visible when authenticated) -->
    <div id="userMenu" class="user-menu" style="display: none;">
      <div class="dropdown">
        <div class="user-avatar dropdown-toggle" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
          <span id="userInitial">U</span>
        </div>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
          <li><a class="dropdown-item" href="#" id="logoutBtn">Logout</a></li>
        </ul>
      </div>
    </div>

    <!-- Auth Section (visible when not authenticated) -->
    <div id="authSection" class="auth-form">
      <div class="text-center mb-5">
        <h1 class="fw-bold mb-3">TF-IDF Counter</h1>
        <p class="text-muted">Please login or register to analyze documents</p>
      </div>
      
      <div class="card mb-5">
        <div class="card-header">
          <ul class="nav nav-tabs auth-tabs" id="authTabs" role="tablist">
            <li class="nav-item" role="presentation">
              <button class="nav-link active" id="login-tab" data-bs-toggle="tab" data-bs-target="#login" type="button" role="tab">Login</button>
            </li>
            <li class="nav-item" role="presentation">
              <button class="nav-link" id="register-tab" data-bs-toggle="tab" data-bs-target="#register" type="button" role="tab">Register</button>
            </li>
          </ul>
        </div>
        <div class="card-body">
          <div class="tab-content" id="authTabsContent">
            <!-- Login Tab -->
            <div class="tab-pane fade show active" id="login" role="tabpanel">
              <form id="loginForm">
                <div class="mb-3">
                  <label for="loginEmail" class="form-label">Email</label>
                  <input type="email" class="form-control" id="loginEmail" required autocomplete="username">
                </div>
                <div class="mb-3">
                  <label for="loginPassword" class="form-label">Password</label>
                  <input type="password" class="form-control" id="loginPassword" required autocomplete="current-password">
                </div>
                <div id="loginMessage" class="mb-3" style="color: red;"></div>
                <button type="submit" class="btn btn-primary w-100">Login</button>
              </form>
            </div>
            
            <!-- Register Tab -->
            <div class="tab-pane fade" id="register" role="tabpanel">
              <form id="registerForm">
                <div class="mb-3">
                  <label for="registerEmail" class="form-label">Email</label>
                  <input type="email" class="form-control" id="registerEmail" required autocomplete="username">
                </div>
                <div class="mb-3">
                  <label for="registerPassword" class="form-label">Password</label>
                  <input type="password" class="form-control" id="registerPassword" required autocomplete="new-password">
                </div>
                <div class="mb-3">
                  <label for="confirmPassword" class="form-label">Confirm Password</label>
                  <input type="password" class="form-control" id="confirmPassword" required autocomplete="new-password">
                </div>
                <div id="registerMessage" class="mb-3" style="color: red;"></div>
                <button type="submit" class="btn btn-primary w-100">Register</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Main App Section (visible when authenticated) -->
    <div id="appSection" style="display: none;">
      <div class="text-center mb-5">
        <h1 class="fw-bold mb-3">TF-IDF Counter</h1>
        <p class="text-muted">Upload a text file to analyze term frequency and inverse document frequency</p>
      </div>
      
      <div class="card mb-5">
        <div class="card-header">
          Upload Document
        </div>
        <div class="card-body">
          <form id="uploadForm">
            <div class="file-upload-wrapper">
              <label class="file-upload-label">
                <div class="file-upload-icon">
                  <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8.5 1.5A1.5 1.5 0 0 1 10 0h4a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h6c-.314.418-.5.937-.5 1.5v6h-2a.5.5 0 0 0-.354.854l2.5 2.5a.5.5 0 0 0 .708 0l2.5-2.5A.5.5 0 0 0 10.5 7.5h-2v-6z"/>
                  </svg>
                </div>
                <div class="file-upload-text">Choose a file or drag it here</div>
                <div class="file-upload-hint">Supports .txt files up to 5MB</div>
                <input type="file" name="file" class="file-upload-input" id="fileInput" required accept=".txt">
              </label>
            </div>
            <div id="message"></div>
            <div class="d-grid">
              <button type="submit" class="btn btn-primary btn-lg">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cloud-arrow-up me-2" viewBox="0 0 16 16">
                  <path fill-rule="evenodd" d="M7.646 5.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 6.707V10.5a.5.5 0 0 1-1 0V6.707L6.354 7.854a.5.5 0 1 1-.708-.708l2-2z"/>
                  <path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z"/>
                </svg>
                Analyze Document
              </button>
            </div>
          </form>
        </div>
      </div>
      
      <div id="results" class="card" style="display:none;">
        <div class="card-header">
          <div class="results-header">
            <h2 class="mb-0">Analysis Results</h2>
            <span id="resultsCount" class="badge badge-count">0 terms</span>
          </div>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-hover align-middle" id="resultsTable">
              <thead>
                <tr>
                  <th scope="col">Term</th>
                  <th scope="col" class="text-end">Count</th>
                  <th scope="col" class="text-end">TF</th>
                  <th scope="col" class="text-end">IDF</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap Bundle with Popper JS CDN -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // DOM Elements
    const authSection = document.getElementById('authSection');
    const appSection = document.getElementById('appSection');
    const userMenu = document.getElementById('userMenu');
    const userInitial = document.getElementById('userInitial');
    const logoutBtn = document.getElementById('logoutBtn');
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    const loginMessage = document.getElementById('loginMessage');
    const registerMessage = document.getElementById('registerMessage');
    const fileInput = document.getElementById('fileInput');
    const uploadForm = document.getElementById('uploadForm');
    const message = document.getElementById('message');
    const resultsDiv = document.getElementById('results');
    const resultsTable = document.getElementById('resultsTable').getElementsByTagName('tbody')[0];
    const resultsCount = document.getElementById('resultsCount');

    // Check authentication status on page load
    document.addEventListener('DOMContentLoaded', () => {
      checkAuthStatus();
      
      // Add file name display when a file is selected
      if (fileInput) {
        fileInput.addEventListener('change', function(e) {
          const fileName = e.target.files[0]?.name || 'Choose a file or drag it here';
          const fileText = document.querySelector('.file-upload-text');
          if (fileText) {
            fileText.textContent = fileName;
            document.querySelector('.file-upload-hint').textContent = e.target.files[0]?.size 
              ? `${(e.target.files[0].size / 1024 / 1024).toFixed(2)} MB` 
              : 'Supports .txt files up to 5MB';
          }
        });
      }
      
      // Add drag and drop functionality
      const fileUploadLabel = document.querySelector('.file-upload-label');
      if (fileUploadLabel) {
        fileUploadLabel.addEventListener('dragover', (e) => {
          e.preventDefault();
          fileUploadLabel.style.borderColor = 'var(--primary)';
          fileUploadLabel.style.backgroundColor = 'rgba(255, 107, 0, 0.1)';
        });
        
        fileUploadLabel.addEventListener('dragleave', () => {
          fileUploadLabel.style.borderColor = 'var(--border-color)';
          fileUploadLabel.style.backgroundColor = 'var(--card-bg)';
        });
        
        fileUploadLabel.addEventListener('drop', (e) => {
          e.preventDefault();
          fileUploadLabel.style.borderColor = 'var(--border-color)';
          fileUploadLabel.style.backgroundColor = 'var(--card-bg)';
          
          if (e.dataTransfer.files.length) {
            fileInput.files = e.dataTransfer.files;
            const event = new Event('change');
            fileInput.dispatchEvent(event);
          }
        });
      }
    });

    // Check authentication status
    function checkAuthStatus() {
      const authToken = getCookie('auth_token');
      
      if (authToken) {
        authSection.style.display = 'none';
        appSection.style.display = 'block';
        userMenu.style.display = 'block';
        
        try {
          const payload = JSON.parse(atob(authToken.split('.')[1]));
          userInitial.textContent = payload.email ? payload.email.charAt(0).toUpperCase() : 'U';
        } catch (e) {
          console.error('Error parsing token:', e);
        }
      } else {
        authSection.style.display = 'block';
        appSection.style.display = 'none';
        userMenu.style.display = 'none';
      }
    }

    // Login form submission
    loginForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const email = document.getElementById('loginEmail').value;
      const password = document.getElementById('loginPassword').value;
      
      try {
        const response = await fetch('/users/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            email: email,
            password: password
          }),
          credentials: 'include' // This is crucial for cookies to work
        });
        
        if (response.ok) {
          // Successful login - check auth status again to update UI
          checkAuthStatus();
        } else {
          const data = await response.json();
          loginMessage.textContent = data.error || 'Invalid email or password';
        }
      } catch (err) {
        loginMessage.textContent = 'An error occurred during login';
      }
    });

    // Register form submission
    registerForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const email = document.getElementById('registerEmail').value;
      const password = document.getElementById('registerPassword').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      
      if (password !== confirmPassword) {
        registerMessage.textContent = 'Passwords do not match';
        return;
      }
      
      try {
        const response = await fetch('/users/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            email: email,
            password: password
          })
        });
        
        const data = await response.json();
        
        if (response.ok) {
          // Auto-login after successful registration
          const loginResponse = await fetch('/users/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              email: email,
              password: password
            }),
            credentials: 'include'
          });
          
          if (loginResponse.ok) {
            checkAuthStatus();
          } else {
            registerMessage.textContent = 'Registered! Please login.';
            // Switch to login tab
            document.getElementById('register-tab').classList.remove('active');
            document.getElementById('register').classList.remove('show', 'active');
            document.getElementById('login-tab').classList.add('active');
            document.getElementById('login').classList.add('show', 'active');
            document.getElementById('loginEmail').value = email;
          }
        } else {
          registerMessage.textContent = data.error || 'Registration failed';
        }
      } catch (err) {
        registerMessage.textContent = 'An error occurred during registration';
      }
    });

    // Logout button click
    logoutBtn.addEventListener('click', async (e) => {
      e.preventDefault();
      
      try {
        const response = await fetch('/users/logout', {
          method: 'GET',
          credentials: 'include'
        });
        
        if (response.ok) {
          checkAuthStatus();
        }
      } catch (err) {
        console.error('Logout error:', err);
      }
    });

    // File upload form submission
    uploadForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      const file = fileInput.files[0];
      if (!file) {
        message.textContent = 'Please select a file';
        return;
      }

      message.textContent = 'Uploading and analyzing document...';
      message.style.color = 'var(--primary)';

      const formData = new FormData();
      formData.append('file', file);

      try {
        const response = await fetch('/upload', {
          method: 'POST',
          body: formData,
          credentials: 'include'
        });

        const data = await response.json();

        if (!response.ok) {
          message.textContent = data.error || 'An error occurred during analysis.';
          message.style.color = 'red';
          resultsDiv.style.display = 'none';
          return;
        }

        message.textContent = 'Analysis complete!';
        message.style.color = 'green';
        resultsTable.innerHTML = ''; // Clear old results

        data.words.forEach(item => {
          const row = resultsTable.insertRow();
          
          // Term
          const termCell = row.insertCell();
          termCell.innerHTML = `<strong>${item.Word}</strong>`;
          
          // Count
          const countCell = row.insertCell();
          countCell.textContent = item.Count;
          countCell.className = 'text-end';
          
          // TF
          const tfCell = row.insertCell();
          tfCell.textContent = item.TF.toFixed(5);
          tfCell.className = 'text-end';
          
          // IDF
          const idfCell = row.insertCell();
          idfCell.textContent = item.IDF.toFixed(5);
          idfCell.className = 'text-end';
        });

        // Update results count
        resultsCount.textContent = `${data.words.length} terms`;
        resultsDiv.style.display = 'block';

      } catch (err) {
        message.textContent = 'Error: ' + err.message;
        message.style.color = 'red';
        resultsDiv.style.display = 'none';
      }
    });

    // Helper function to get cookie value
    function getCookie(name) {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length === 2) return parts.pop().split(';').shift();
    }
  </script>
</body>
</html>
{{end}}